// https://gist.github.com/timknight/03e6335b8816aa534cf7
// Breakpoints from https://material.io/design/layout/responsive-layout-grid.html#breakpoints
// Values: xs | sm | md | lg | 480px | $min: 640px, $max: 767px
@mixin breakpoint($min: 0, $max: 0) {
	$type: type-of($min);

	@if $type == string {
	  @if $min == xs {
		@media (max-width: 599px) { @content; }       // Mobile Devices
	  }

	  @else if $min == sm {
		@media (min-width: 600px) { @content; }       // Tablet Devices
	  }

	  @else if $min == md {
		@media (min-width: 1024px) { @content; }       // Desktops
	  }

	  @else if $min == lg {
		@media (min-width: 1440px) { @content; }      // Widescreen Desktops
	  }

	  // Otherwise pass a warning to the compiler as to the appropriate options
	  @else {
		@warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
	  }
	}
	@else if $type == number {
	  // Allow for custom parameters for min and max size
	  $query: "all" !default;
	  @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
	  @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
	  @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
	  @media #{$query} { @content; }
	}
  }

// example Usages
// aside.primary {
// 	@include breakpoint(md) {
// 	  float: right;
// 	  width: 350px;
// 	}
// 	@include breakpoint(480px) {
// 	  display: none;
// 	}
// 	@include breakpoint($min: 640px, $max: 767px) {
// 	  text-align: center;
// 	  font-style: italic;
// 	}
// }


// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins
@mixin flex-box {
    display: -webkit-box;
    display: -moz-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
  }
  
  //Using this mixin
  %flexbox { @include flex-box; }

  @mixin inline-flex {
    display: -webkit-inline-box;
    display: -moz-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
  
  %inline-flex { @include inline-flex; }

  @mixin flex-direction($value: row) {
    @if $value == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
      -moz-box-direction: reverse;
      -moz-box-orient: horizontal;
    } @else if $value == column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
      -moz-box-direction: normal;
      -moz-box-orient: vertical;
    } @else if $value == column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
      -moz-box-direction: reverse;
      -moz-box-orient: vertical;
    } @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
      -moz-box-direction: normal;
      -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
  }

  
  @mixin flex-wrap($value: nowrap) {
    // No Webkit/FF Box fallback.
    -webkit-flex-wrap: $value;
    @if $value == nowrap {
      -ms-flex-wrap: none;
    } @else {
      -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
  }

  @mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -moz-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -ms-flex-order: $int;
    order: $int;
  }

  @mixin flex-grow($int: 1) {
    -webkit-box-flex: $int;
    -moz-box-flex: $int;
    -webkit-flex-grow: $int;
    -ms-flex: $int;
    flex-grow: $int;
  }

  @mixin flex-shrink($int: 0) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex: $int;
    flex-shrink: $int;
  }

  @mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    flex-basis: $value;
  }

  // The justify-content property aligns flex items along the main axis of the current line of the flex container
  @mixin justify-content($value: flex-start) {
    @if $value == flex-start {
      -webkit-box-pack: start;
      -moz-box-pack: start;
      -ms-flex-pack: start;
    } @else if $value == flex-end {
      -webkit-box-pack: end;
      -moz-box-pack: end;
      -ms-flex-pack: end;
    } @else if $value == space-between {
      -webkit-box-pack: justify;
      -moz-box-pack: justify;
      -ms-flex-pack: justify;
    } @else if $value == space-around {
      -ms-flex-pack: distribute;
    } @else {
      -webkit-box-pack: $value;
      -moz-box-pack: $value;
      -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    justify-content: $value;
  }
    // Shorter version:
    @mixin flex-just($args...) { @include justify-content($args...); }

    @mixin align-items($value: stretch) {
        @if $value == flex-start {
          -webkit-box-align: start;
          -moz-box-align: start;
          -ms-flex-align: start;
        } @else if $value == flex-end {
          -webkit-box-align: end;
          -moz-box-align: end;
          -ms-flex-align: end;
        } @else {
          -webkit-box-align: $value;
          -moz-box-align: $value;
          -ms-flex-align: $value;
        }
        -webkit-align-items: $value;
        align-items: $value;
      }

      @mixin align-self($value: auto) {
        // No Webkit Box Fallback.
        -webkit-align-self: $value;
        @if $value == flex-start {
          -ms-flex-item-align: start;
        } @else if $value == flex-end {
          -ms-flex-item-align: end;
        } @else {
          -ms-flex-item-align: $value;
        }
        align-self: $value;
      }

      @mixin align-content($value: stretch) {
        // No Webkit Box Fallback.
        -webkit-align-content: $value;
        @if $value == flex-start {
          -ms-flex-line-pack: start;
        } @else if $value == flex-end {
          -ms-flex-line-pack: end;
        } @else {
          -ms-flex-line-pack: $value;
        }
        align-content: $value;
	  }
	  
// Values: auto (default) | flex-start | flex-end | center | baseline | stretch
@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

// Ensure CSS grid works with IE 11 spec.
// https://css-tricks.com/browser-compatibility-css-grid-layouts-simple-sass-mixins/
// sass-lint:disable no-vendor-prefixes, no-duplicate-properties
@mixin display-grid {
	display: -ms-grid;
	display: grid;
  }
  
  // $columns values should be delimited by a space
  @mixin grid-template-columns($columns...) {
	-ms-grid-columns: $columns;
	grid-template-columns: $columns;
  }
  
  // $rows values should be delimited by a space
  @mixin grid-template-rows($rows...) {
	-ms-grid-rows: $rows;
	grid-template-rows: $rows;
  }
  
  // Can be used in combination with above grid-template-X mixins.
  // These result in the same output:
  // @include grid-template-columns(10px grid-repeat(4, 20px) 30px);
  // @include grid-template-columns(10px 20px 20px 20px 20px 30px);
  @function grid-repeat($repeat, $stuff: 1fr) {
	$list: ();
	@for $i from 1 through $repeat {
	  $list: append($list, $stuff, space);
	}
	@return $list;
  }
  
  @mixin grid-column($col-start, $col-end) {
	-ms-grid-column: $col-start;
	-ms-grid-column-span: $col-end - $col-start;
	grid-column: #{$col-start} / #{$col-end};
  }
  
  @mixin grid-row($row-start, $row-end) {
	-ms-grid-row: $row-start;
	-ms-grid-row-span: $row-end - $row-start;
	grid-row: #{$row-start} / #{$row-end};
  }
  
  @mixin grid-align-self($value) {
	-ms-grid-row-align: $value;
	align-self: $value;
  }
  
  @mixin grid-justify-self($value) {
	-ms-grid-column-align: $value;
	justify-self: $value;
  }


@mixin color-filter($value) {
	-webkit-filter: $value;
    -moz-filter: $value;
    -o-filter: $value;
    -ms-filter: $value;
    filter: $value;
}
